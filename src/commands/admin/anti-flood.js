/**
 * Comando anti-flood para DeadBoT
 * Limita figurinhas por usu√°rio e aplica puni√ß√µes progressivas
 * 10 figurinhas: aviso
 * 11 figurinhas: 1¬™ advert√™ncia
 * 12 figurinhas: 2¬™ advert√™ncia  
 * 13 figurinhas: ban autom√°tico
 *
 * @author Adaptado para DeadBoT
 */
const { PREFIX } = require("../../config");

// Armazena configura√ß√µes e contadores por grupo (GLOBAL)
global.antifloodData = global.antifloodData || new Map();

// Fun√ß√£o para inicializar dados do grupo
function initGroupData(groupId) {
  if (!global.antifloodData.has(groupId)) {
    global.antifloodData.set(groupId, {
      active: false,
      users: new Map()
    });
  }
}

// Fun√ß√£o para verificar e resetar contador se passou 30 minutos
function checkAndResetUser(groupId, userId) {
  const groupData = global.antifloodData.get(groupId);
  if (!groupData) return;
  
  const now = Date.now();
  const thirtyMinutes = 30 * 60 * 1000;
  
  if (!groupData.users.has(userId)) {
    groupData.users.set(userId, { count: 0, lastReset: now });
    return;
  }
  
  const userData = groupData.users.get(userId);
  
  if (now - userData.lastReset >= thirtyMinutes) {
    userData.count = 0;
    userData.lastReset = now;
  }
}

// Middleware para processar figurinhas
function processSticker({ socket, message, from }) {
  return new Promise(async (resolve, reject) => {
    try {
      if (!message || message.type !== 'sticker') {
        return resolve();
      }
      
      const groupId = from;
      const userId = message.author;
      
      initGroupData(groupId);
      const groupData = global.antifloodData.get(groupId);
      
      if (!groupData.active) {
        return resolve();
      }
      
      checkAndResetUser(groupId, userId);
      
      const userData = groupData.users.get(userId);
      userData.count += 1;
      
      switch (userData.count) {
        case 10:
          await socket.sendMessage(groupId, { 
            text: "‚ö†Ô∏è Limite de 10 figurinhas atingido!\n\n‚è∞ Aguarde 30 minutos para enviar mais figurinhas." 
          });
          break;
          
        case 11:
          await socket.sendMessage(groupId, { 
            text: "üö® Anti-flood ativado, m√°ximo de figurinhas atingido!\n\n‚ö†Ô∏è Pare de enviar figurinhas ou ser√° punido!" 
          });
          break;
          
        case 12:
          await socket.sendMessage(groupId, { 
            text: "‚õî Anti-flood ativado: voc√™ ser√° banido!\n\nüö´ √öltima advert√™ncia!" 
          });
          break;
          
        case 13:
          try {
            await socket.groupParticipantsUpdate(groupId, [userId], 'remove');
            await socket.sendMessage(groupId, { 
              text: "üî® Usu√°rio banido por spam de figurinhas" 
            });
          } catch (error) {
            console.log('[ANTI-FLOOD] Erro ao banir usu√°rio:', error);
            await socket.sendMessage(groupId, { 
              text: "‚ùå Erro ao banir usu√°rio. Verifique as permiss√µes do bot." 
            });
          }
          break;
      }
      
      resolve();
    } catch (error) {
      console.error('[ANTI-FLOOD] Erro no processamento:', error);
      reject(error);
    }
  });
}

module.exports = {
  name: "anti-flood",
  description: "Ativa ou desativa o sistema anti-flood de figurinhas",
  commands: ["anti-flood", "antiflood", "af"],
  usage: `${PREFIX}anti-flood [1/0] - 1 para ativar, 0 para desativar`,
  /**
   * @param {CommandHandleProps} props
   * @returns {Promise<void>}
   */
  handle: async ({ args, webMessage, sendText, from }) => {
    // Usa o ID do grupo do webMessage se from estiver undefined
    const groupId = from || webMessage?.key?.remoteJid;
    
    if (!groupId || !groupId.includes('@g.us')) {
      await sendText("‚ùå Este comando s√≥ funciona em grupos!");
      return;
    }
    
    initGroupData(groupId);
    const groupData = global.antifloodData.get(groupId);
    
    // Se n√£o h√° argumentos, mostra o status atual
    if (!args[0]) {
      const status = groupData.active ? "üü¢ ATIVO" : "üî¥ INATIVO";
      const totalUsers = groupData.users.size;
      
      const now = Date.now();
      const thirtyMinutes = 30 * 60 * 1000;
      let activeUsers = 0;
      
      groupData.users.forEach(userData => {
        if (userData.count > 0 && (now - userData.lastReset) < thirtyMinutes) {
          activeUsers++;
        }
      });
      
      await sendText(
        `üìä *Status do Anti-flood*\n\n` +
        `‚Ä¢ Status: ${status}\n` +
        `‚Ä¢ Usu√°rios no sistema: ${totalUsers}\n` +
        `‚Ä¢ Usu√°rios ativos (30min): ${activeUsers}\n` +
        `‚Ä¢ Limite: 10 figurinhas a cada 30 minutos\n\n` +
        `üí° *Como usar:*\n` +
        `‚Ä¢ ${PREFIX}anti-flood 1 - Ativar\n` +
        `‚Ä¢ ${PREFIX}anti-flood 0 - Desativar\n\n` +
        `‚ö†Ô∏è *Sistema de puni√ß√µes (flood):*\n` +
        `‚Ä¢ 10 figurinhas: Aviso (aguarde 30min)\n` +
        `‚Ä¢ 11 figurinhas: 1¬™ advert√™ncia\n` +
        `‚Ä¢ 12 figurinhas: 2¬™ advert√™ncia\n` +
        `‚Ä¢ 13 figurinhas: Ban autom√°tico\n\n` +
        `‚è∞ *Contador reseta automaticamente em 30 minutos*`
      );
      return;
    }
    
    const action = args[0].toLowerCase();
    
    switch (action) {
      case '1':
      case 'on':
      case 'ativar':
        groupData.active = true;
        await sendText(
          "‚úÖ *Anti-flood ativado!*\n\n" +
          "üîç O sistema monitorar√° figurinhas:\n" +
          "‚Ä¢ M√°ximo: 10 figurinhas a cada 30 minutos\n" +
          "‚Ä¢ Puni√ß√µes aplicadas apenas em caso de flood\n" +
          "‚Ä¢ Contador reseta automaticamente"
        );
        break;
        
      case '0':
      case 'off':
      case 'desativar':
        groupData.active = false;
        await sendText("‚ùå *Anti-flood desativado!*\n\nO sistema n√£o monitorar√° mais as figurinhas.");
        break;
        
      default:
        await sendText(
          `‚ùå *Op√ß√£o inv√°lida!*\n\n` +
          `üí° *Como usar:*\n` +
          `‚Ä¢ ${PREFIX}anti-flood 1 - Ativar\n` +
          `‚Ä¢ ${PREFIX}anti-flood 0 - Desativar`
        );
    }
  },
  
  // Exporta fun√ß√£o para uso no middleware principal
  processSticker
};