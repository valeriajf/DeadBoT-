/**
 * Middleware AFK - Detecta automaticamente quando usu√°rios voltam
 * Substitua o conte√∫do do arquivo: src/middlewares/afkMiddleware.js
 * 
 * @author Val (DeadBoT)
 */
const afkSystem = require('../utils/afkSystem');

/**
 * Middleware que verifica AFK automaticamente
 */
module.exports = async (socket, { messages }) => {
  for (const webMessage of messages) {
    try {
      // Ignora mensagens do pr√≥prio bot
      if (webMessage.key.fromMe) continue;
      
      // S√≥ processa mensagens de grupos
      const remoteJid = webMessage.key.remoteJid;
      if (!remoteJid?.includes('@g.us')) continue;
      
      const userJid = webMessage.key.participant || webMessage.key.remoteJid;
      
      // Verifica se o usu√°rio estava AFK e agora mandou mensagem
      if (afkSystem.isAFK(userJid)) {
        const afkData = afkSystem.removeAFK(userJid);
        
        if (afkData) {
          // Pega o nome do usu√°rio
          let userName = "Usu√°rio";
          if (webMessage.pushName && !webMessage.pushName.match(/^\+?\d+$/)) {
            userName = webMessage.pushName;
          }
          
          // Calcula dura√ß√£o do AFK
          const now = new Date();
          const duration = afkSystem.formatDuration(now.getTime() - afkData.startTime);
          
          // Formata data/hora atual
          const timeString = now.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
          });
          const dateString = now.toLocaleDateString('pt-BR');
          
          // Mensagem de volta
          const welcomeMessage = `üëã @${userJid.split('@')[0]} voltou!

üïê ${timeString} | üìÖ ${dateString}
‚è±Ô∏è Ficou ausente por: ${duration}
üí≠ Motivo anterior: ${afkData.reason}`;

          // Envia mensagem mencionando o usu√°rio
          await socket.sendMessage(remoteJid, {
            text: welcomeMessage,
            mentions: [userJid]
          });
        }
      }
      
      // Verifica se algu√©m mencionou um usu√°rio AFK
      const mentions = webMessage.message?.extendedTextMessage?.contextInfo?.mentionedJid || [];
      
      for (const mentionedJid of mentions) {
        if (afkSystem.isAFK(mentionedJid) && mentionedJid !== userJid) {
          const afkData = afkSystem.getAFKData(mentionedJid);
          const duration = afkSystem.getAFKDuration(mentionedJid);
          
          // Formata data/hora do AFK
          const afkDate = new Date(afkData.timestamp);
          const afkTimeString = afkDate.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
          });
          const afkDateString = afkDate.toLocaleDateString('pt-BR');
          
          // Mensagem informando que o usu√°rio est√° AFK
          const afkNotification = `üí§ @${mentionedJid.split('@')[0]} est√° AFK desde ${afkDateString} √†s ${afkTimeString}.

‚è±Ô∏è Ausente h√°: ${duration}
üí≠ Motivo: ${afkData.reason}`;

          await socket.sendMessage(remoteJid, {
            text: afkNotification,
            mentions: [mentionedJid]
          }, { quoted: webMessage });
        }
      }
      
    } catch (error) {
      console.error('‚ùå [AFK] Erro no middleware AFK:', error.message);
    }
  }
};