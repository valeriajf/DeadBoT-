/**
 * Comando Anti-M√≠dia para DeadBoT
 * 
 * @author VaL
 */
const { PREFIX } = require("../../config");

// Armazenar grupos com anti-m√≠dia ativo (em produ√ß√£o, usar banco de dados)
const antiMediaGroups = new Set();

module.exports = {
    name: "anti-midia",
    description: "Ativa/desativa prote√ß√£o contra m√≠dia normal no grupo (s√≥ permite visualiza√ß√£o √∫nica)",
    commands: ["anti-midia", "antimimidia", "antimidia"],
    usage: `${PREFIX}anti-midia (1/0)`,
    
    /**
     * @param {CommandHandleProps} props
     * @returns {Promise<void>}
     */
    handle: async ({ 
        sendText, 
        args, 
        remoteJid,
        chatId,
        sender
    }) => {
        const groupId = remoteJid || chatId;
        
        // Verifica se √© grupo
        if (!groupId || !groupId.endsWith('@g.us')) {
            return await sendText("‚ùå Este comando s√≥ funciona em grupos!");
        }

        // TEMPOR√ÅRIO: Removendo verifica√ß√µes de admin para teste
        // TODO: Ajustar verifica√ß√µes depois

        const action = args[0];
        
        if (!action || !['1', '0'].includes(action)) {
            const status = antiMediaGroups.has(groupId) ? "üü¢ Ativo" : "üî¥ Inativo";
            return await sendText(
                `üìã *Anti-M√≠dia Status:* ${status}\n\n` +
                `*Uso:* ${PREFIX}anti-midia (1/0)\n` +
                `*1* = Ativar | *0* = Desativar\n` +
                `*Fun√ß√£o:* Permite apenas m√≠dias em visualiza√ß√£o √∫nica`
            );
        }

        if (action === '1') {
            if (antiMediaGroups.has(groupId)) {
                return await sendText("‚ö†Ô∏è Anti-m√≠dia j√° est√° ativo neste grupo!");
            }
            
            antiMediaGroups.add(groupId);
            await sendText(
                "‚úÖ *Anti-m√≠dia ativado!*\n\n" +
                "‚Ä¢ Imagens, v√≠deos e GIFs ser√£o deletados\n" +
                "‚Ä¢ Apenas m√≠dia em *visualiza√ß√£o √∫nica* ser√° permitida"
            );
            
        } else if (action === '0') {
            if (!antiMediaGroups.has(groupId)) {
                return await sendText("‚ö†Ô∏è Anti-m√≠dia j√° est√° desativo neste grupo!");
            }
            
            antiMediaGroups.delete(groupId);
            await sendText(
                "‚úÖ *Anti-m√≠dia desativado!*\n\n" +
                "üîì Agora todos os tipos de m√≠dia s√£o permitidos novamente."
            );
        }
    },

    // Fun√ß√£o para verificar m√≠dia (ser√° chamada no onMessagesUpsert)
    checkMedia: async ({ 
        message, 
        from, 
        isGroupMsg, 
        deleteMessage, 
        sendText, 
        sender,
        isBotGroupAdmins,
        webMessage // Adicionamos o webMessage para poder marcar
    }) => {
        // S√≥ funciona em grupos com anti-m√≠dia ativo e bot admin
        if (!isGroupMsg || !antiMediaGroups.has(from) || !isBotGroupAdmins) {
            return;
        }

        const { type, isViewOnce } = message;
        
        // Verifica se √© m√≠dia (EXCLUINDO stickers/figurinhas)
        const isMedia = [
            'imageMessage', 
            'videoMessage'
            // 'stickerMessage' removido - figurinhas s√£o sempre permitidas
        ].includes(type);

        // Se √© m√≠dia mas N√ÉO √© visualiza√ß√£o √∫nica, deletar
        if (isMedia && !isViewOnce) {
            try {
                // PRIMEIRO avisa o usu√°rio marcando a mensagem original
                await sendText(
                    "‚ö†Ô∏è *M√≠dia n√£o permitida!*\n" +
                    "Mande somente em *visualiza√ß√£o √∫nica*",
                    { 
                        quoted: webMessage,
                        contextInfo: {
                            stanzaId: webMessage.key.id,
                            participant: webMessage.key.participant || webMessage.key.remoteJid,
                            quotedMessage: webMessage.message
                        }
                    }
                );
                
                // Aguarda para garantir que a resposta seja processada
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                // DEPOIS deleta a mensagem
                await deleteMessage();
                
            } catch (error) {
                console.error("‚ùå [ANTI-M√çDIA] Erro ao deletar m√≠dia:", error);
            }
        }
    },

    // Getter para verificar se grupo tem anti-m√≠dia ativo
    isAntiMediaActive: (groupId) => {
        return antiMediaGroups.has(groupId);
    },

    // Para limpar grupos inativos (opcional)
    clearInactiveGroups: () => {
        antiMediaGroups.clear();
    }
};