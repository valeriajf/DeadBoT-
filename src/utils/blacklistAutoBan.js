/**
 * Event handler para banimento autom√°tico de usu√°rios na lista negra
 * Monitora quando usu√°rios entram no grupo e verifica se est√£o na lista negra
 * 
 * @author VaL
 */
const fs = require('fs');
const path = require('path');

// Caminho para o arquivo da lista negra
const BLACKLIST_FILE = path.join(BASE_DIR, 'data', 'blacklist.json');

// Fun√ß√£o para carregar a lista negra
function loadBlacklist() {
  try {
    if (!fs.existsSync(BLACKLIST_FILE)) {
      return {};
    }
    const data = fs.readFileSync(BLACKLIST_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('Erro ao carregar lista negra:', error);
    return {};
  }
}

/**
 * Fun√ß√£o para verificar e banir usu√°rios da lista negra
 * Chame esta fun√ß√£o sempre que algu√©m entrar no grupo
 */
async function checkAndBanBlacklistedUsers(socket, groupId, newParticipants) {
  try {
    // Carrega a lista negra
    const blacklist = loadBlacklist();
    
    // Verifica se o grupo tem lista negra
    if (!blacklist[groupId] || blacklist[groupId].length === 0) {
      return;
    }

    for (const participant of newParticipants) {
      const userNumber = participant.replace('@s.whatsapp.net', '');
      
      // Verifica se o usu√°rio est√° na lista negra
      if (blacklist[groupId].includes(userNumber)) {
        try {
          console.log(`[BLACKLIST] Detectado usu√°rio ${userNumber} na lista negra do grupo ${groupId}`);
          
          // Bane o usu√°rio imediatamente
          await socket.groupParticipantsUpdate(groupId, [participant], 'remove');
          
          // Envia mensagem informando sobre o banimento autom√°tico
          const banMessage = 
            `üö´ *BANIMENTO AUTOM√ÅTICO*\n\n` +
            `üë§ *Usu√°rio:* ${userNumber}\n` +
            `‚ö†Ô∏è *Motivo:* Usu√°rio est√° na lista negra\n` +
            `üîí *A√ß√£o:* Banido automaticamente\n\n` +
            `üí° Para remover da lista negra, use o comando !lista-negra-remover`;
          
          await socket.sendMessage(groupId, { text: banMessage });
          
          console.log(`[BLACKLIST] Usu√°rio ${userNumber} banido automaticamente do grupo ${groupId}`);
          
        } catch (error) {
          console.error(`[BLACKLIST] Erro ao banir usu√°rio ${userNumber}:`, error);
          
          // Se falhar ao banir, pelo menos avisa os admins
          try {
            const warningMessage = 
              `‚ö†Ô∏è *ALERTA - LISTA NEGRA*\n\n` +
              `üë§ *Usu√°rio:* ${userNumber}\n` +
              `üö® *Status:* Na lista negra mas n√£o foi poss√≠vel banir automaticamente\n` +
              `üí° *A√ß√£o recomendada:* Bana manualmente ou verifique as permiss√µes do bot`;
            
            await socket.sendMessage(groupId, { text: warningMessage });
          } catch (msgError) {
            console.error('[BLACKLIST] Erro ao enviar mensagem de aviso:', msgError);
          }
        }
      }
    }
    
  } catch (error) {
    console.error('[BLACKLIST] Erro no checkAndBanBlacklistedUsers:', error);
  }
}

// Exemplo de como integrar com o event handler do seu bot
// VOC√ä PRECISA ADAPTAR ISSO PARA O SISTEMA DE EVENTOS DO SEU BOT

module.exports = {
  name: "blacklist-auto-ban",
  description: "Bane automaticamente usu√°rios da lista negra que tentam entrar no grupo",
  
  // Esta √© uma fun√ß√£o exemplo - voc√™ precisa adapt√°-la para o seu sistema de eventos
  checkAndBanBlacklistedUsers,
};